{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","input","setInput","apiData","setApiData","cityList","setCitylist","onSearch","a","axios","get","then","response","console","log","temp","data","main","name","icon","weather","description","humidity","windSpeed","wind","speed","feelsLike","feels_like","minTemp","temp_min","maxTemp","temp_max","className","src","alt","type","placeholder","onChange","e","target","value","onClick","map","val","index","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kTAgIeA,MA1Hf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAGiBF,mBAAS,IAH1B,mBAGNG,EAHM,KAGGC,EAHH,OAImBJ,mBAAS,IAJ5B,mBAINK,EAJM,KAIIC,EAJJ,KAWPC,EAAQ,uCAAG,sBAAAC,EAAA,6DAEfF,GAAY,WACV,MAAM,GAAN,mBAAWD,GAAX,CAAqBJ,OAHR,SAKTQ,IACHC,IADG,4DAEmDT,EAFnD,yDAIHU,MAAK,SAACC,GACLC,QAAQC,IAAIF,GACZR,EAAW,CACTW,KAAK,GAAD,OAAKH,EAASI,KAAKC,KAAKF,KAAxB,UACJG,KAAK,GAAD,OAAKN,EAASI,KAAKE,MACvBC,KAAK,oCAAD,OAAsCP,EAASI,KAAKI,QAAQ,GAAGD,KAA/D,QACJE,YAAY,GAAD,OAAKT,EAASI,KAAKI,QAAQ,GAAGC,aACzCC,SAAS,GAAD,OAAKV,EAASI,KAAKC,KAAKK,SAAxB,MACRC,UAAU,GAAD,OAAKX,EAASI,KAAKQ,KAAKC,OACjCC,UAAU,GAAD,OAAKd,EAASI,KAAKC,KAAKU,WAAxB,UACTC,QAAQ,GAAD,OAAKhB,EAASI,KAAKC,KAAKY,SAAxB,UACPC,QAAQ,GAAD,OAAKlB,EAASI,KAAKC,KAAKc,SAAxB,eApBE,2CAAH,qDAyBd,OACE,sBAAKC,UAAU,MAAf,UACE,sBAAKA,UAAU,OAAf,UACE,oBAAIA,UAAU,OAAd,yBAC2B,cAA1B,UAAG7B,EAAQmB,UACO,KAAjB,UAAGnB,IAAoB,kCAEvB,sBAAK6B,UAAU,OAAf,UACE,+BACE,6BAAK7B,EAAQY,SAGf,iCACE,cAAC,IAAD,IACA,6BAAKZ,EAAQe,OACb,wCAEF,iCACE,qBAAKe,IAAK9B,EAAQgB,KAAMe,IAAI,KAC5B,4BAAI/B,EAAQkB,uBAMpB,sBAAKW,UAAU,UAAf,UACE,sBAAKA,UAAU,YAAf,UACE,uBACEG,KAAK,OACLC,YAAY,YACZC,SA3DO,SAACC,GAChBpC,EAASoC,EAAEC,OAAOC,QA2DVA,MAAOvC,IAET,wBAAQwC,QAASlC,EAAjB,SACE,cAAC,IAAD,CAAYyB,UAAU,oBAG1B,6BACG3B,EAASqC,KAAI,SAACC,EAAKC,GAClB,OAAO,6BAAiBD,GAARC,QAGpB,sBAAKZ,UAAU,cAAf,UACE,uBAC2B,cAA1B,UAAG7B,EAAQmB,UACO,KAAjB,UAAGnB,IAAoB,mCACrB,qBAAI6B,UAAU,eAAd,yIAGK,IACH,mBAAGa,KAAK,8BAAR,kCAJF,IAKE,mBAAGb,UAAU,YAAb,kCAIJ,qCACE,iDAEA,sBAAKA,UAAU,iBAAf,UACE,sBAAKA,UAAU,cAAf,UACE,4CACA,0CACA,0CACA,0CAEA,yCAGF,sBAAKA,UAAU,eAAf,UACE,sCAAO7B,EAAQuB,aACf,sCAAOvB,EAAQyB,WACf,sCAAOzB,EAAQ2B,WACf,sCAAO3B,EAAQmB,YAEf,sCAAOnB,EAAQoB,UAAf,mBAKR,iCC7GKuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrC,MAAK,YAAkD,IAA/CsC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1f18ea6f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./App.css\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\r\n\r\nfunction App() {\r\n  const [input, setInput] = useState(\"\");\r\n  // const [cityName, setCityName] = useState(\"\");\r\n  const [apiData, setApiData] = useState(\"\");\r\n  const [cityList, setCitylist] = useState([]);\r\n  // const [allData, setAlldata] = useState({ temp: \"\" });\r\n\r\n  const getInput = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  const onSearch = async () => {\r\n    // setCityName(input);\r\n    setCitylist(() => {\r\n      return [...cityList, input];\r\n    });\r\n    await axios\r\n      .get(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${input}&appid=079b33b501019bc3f00b59c304494648&units=metric`\r\n      )\r\n      .then((response) => {\r\n        console.log(response);\r\n        setApiData({\r\n          temp: `${response.data.main.temp} °C`,\r\n          name: `${response.data.name}`,\r\n          icon: `http://openweathermap.org/img/wn/${response.data.weather[0].icon}.png`,\r\n          description: `${response.data.weather[0].description}`,\r\n          humidity: `${response.data.main.humidity} %`,\r\n          windSpeed: `${response.data.wind.speed}`,\r\n          feelsLike: `${response.data.main.feels_like} °C`,\r\n          minTemp: `${response.data.main.temp_min} °C`,\r\n          maxTemp: `${response.data.main.temp_max} °C`,\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"hero\">\r\n        <h3 className=\"logo\">Weather App</h3>\r\n        {`${apiData.humidity}` === \"undefined\" ? (\r\n          `${apiData}` === \"\" && <p> </p>\r\n        ) : (\r\n          <div className=\"info\">\r\n            <span>\r\n              <h1>{apiData.temp}</h1>\r\n            </span>\r\n\r\n            <span>\r\n              <LocationOnIcon />\r\n              <h3>{apiData.name}</h3>\r\n              <p>time</p>\r\n            </span>\r\n            <span>\r\n              <img src={apiData.icon} alt=\"\" />\r\n              <p>{apiData.description}</p>\r\n            </span>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"sidebar\">\r\n        <div className=\"inputarea\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search...\"\r\n            onChange={getInput}\r\n            value={input}\r\n          />\r\n          <button onClick={onSearch}>\r\n            <SearchIcon className=\"searchIcon\" />\r\n          </button>\r\n        </div>\r\n        <ul>\r\n          {cityList.map((val, index) => {\r\n            return <li key={index}>{val}</li>;\r\n          })}\r\n        </ul>\r\n        <div className=\"sideBarDesc\">\r\n          <hr />\r\n          {`${apiData.humidity}` === \"undefined\" ? (\r\n            `${apiData}` === \"\" && <p> </p> && (\r\n              <h2 className=\"welcome_text\">\r\n                Welcome to the weather app where u can search and find the\r\n                weather of any city or any other location. This app is powered\r\n                by{\" \"}\r\n                <a href=\"https://openweathermap.org/\"> openweathermap.org </a>.\r\n                <p className=\"copyWrite\">© Tanmay Paul </p>\r\n              </h2>\r\n            )\r\n          ) : (\r\n            <>\r\n              <h2>Weather Details</h2>\r\n\r\n              <div className=\"weatherDetails\">\r\n                <div className=\"detailsArea\">\r\n                  <p>Feels Like:</p>\r\n                  <p>Min Temp:</p>\r\n                  <p>Max Temp:</p>\r\n                  <p>Humidity:</p>\r\n\r\n                  <p>Wind:</p>\r\n                </div>\r\n\r\n                <div className=\"detailsValue\">\r\n                  <p>{`${apiData.feelsLike}`}</p>\r\n                  <p>{`${apiData.minTemp}`}</p>\r\n                  <p>{`${apiData.maxTemp}`}</p>\r\n                  <p>{`${apiData.humidity}`}</p>\r\n\r\n                  <p>{`${apiData.windSpeed}km/h`}</p>\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n          <hr />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}