{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","input","setInput","apiData","setApiData","cityList","setCitylist","url","onSearch","a","alert","axios","get","response","data","name","apidata2","dateTime","location","localtime","fullTime","Date","temp","main","icon","weather","description","humidity","windSpeed","wind","speed","feelsLike","feels_like","minTemp","temp_min","maxTemp","temp_max","time","Intl","DateTimeFormat","hour12","hour","minute","format","className","src","alt","type","placeholder","onChange","e","target","value","onClick","map","val","index","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c5be0d0.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./App.css\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\r\n\r\nfunction App() {\r\n  const [input, setInput] = useState(\"\");\r\n  const [apiData, setApiData] = useState(\"\");\r\n  const [cityList, setCitylist] = useState([]);\r\n  const url = `https://api.openweathermap.org/data/2.5/weather?q=${input}&appid=079b33b501019bc3f00b59c304494648&units=metric`;\r\n\r\n  const getInput = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  const onSearch = async () => {\r\n    input === \"\"\r\n      ? alert(\"Please Enter a city name\")\r\n      : setCitylist(() => {\r\n          return [...cityList, input];\r\n        });\r\n\r\n    const response = await axios.get(url);\r\n    const apidata2 = await axios.get(\r\n      `https://api.weatherapi.com/v1/current.json?key=aa44733df8e04ac7a2d52654211103&q=${response.data.name}&aqi=no`\r\n    );\r\n\r\n    const dateTime = apidata2.data.location.localtime;\r\n    const fullTime = new Date(dateTime);\r\n\r\n    await setApiData({\r\n      temp: `${response.data.main.temp} °C`,\r\n      name: `${response.data.name}`,\r\n      icon: `http://openweathermap.org/img/wn/${response.data.weather[0].icon}.png`,\r\n      description: `${response.data.weather[0].description}`,\r\n      humidity: `${response.data.main.humidity} %`,\r\n      windSpeed: `${response.data.wind.speed}`,\r\n      feelsLike: `${response.data.main.feels_like} °C`,\r\n      minTemp: `${response.data.main.temp_min} °C`,\r\n      maxTemp: `${response.data.main.temp_max} °C`,\r\n      // Converted the time into 12 hr format and then assign it to the variable\r\n      time: `${new Intl.DateTimeFormat(\"default\", {\r\n        hour12: true,\r\n        hour: \"numeric\",\r\n        minute: \"numeric\",\r\n      }).format(fullTime)}`,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"hero\">\r\n        <div className=\"logodiv\">\r\n          <h3 className=\"logo\">Weather App</h3>\r\n        </div>\r\n        {`${apiData.humidity}` === \"undefined\" ? (\r\n          `${apiData}` === \"\" && <p> </p>\r\n        ) : (\r\n          <div className=\"info\">\r\n            <span>\r\n              <h1>{apiData.temp}</h1>\r\n            </span>\r\n\r\n            <span>\r\n              <LocationOnIcon />\r\n              <h3>{apiData.name}</h3>\r\n              <p>{apiData.time}</p>\r\n            </span>\r\n            <span>\r\n              <img src={apiData.icon} alt=\"\" />\r\n              <p>{apiData.description}</p>\r\n            </span>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"sidebar\">\r\n        <div className=\"inputarea\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search...\"\r\n            onChange={getInput}\r\n            value={input}\r\n          />\r\n          <button onClick={onSearch}>\r\n            <SearchIcon className=\"searchIcon\" />\r\n          </button>\r\n        </div>\r\n        <ul>\r\n          {cityList.map((val, index) => {\r\n            return <li key={index}>{val}</li>;\r\n          })}\r\n        </ul>\r\n        <div className=\"sideBarDesc\">\r\n          <hr />\r\n          {`${apiData.humidity}` === \"undefined\" ? (\r\n            `${apiData}` === \"\" && <p> </p> && (\r\n              <h2 className=\"welcome_text\">\r\n                Welcome to the weather app where u can search and find the\r\n                weather of any city or any other location. This app is powered\r\n                by{\" \"}\r\n                <a href=\"https://openweathermap.org/\"> openweathermap.org </a>.\r\n                <p className=\"copyWrite\">© Tanmay Paul </p>\r\n              </h2>\r\n            )\r\n          ) : (\r\n            <>\r\n              <h2>Weather Details</h2>\r\n\r\n              <div className=\"weatherDetails\">\r\n                <div className=\"detailsArea\">\r\n                  <p>Feels Like:</p>\r\n                  <p>Min Temp:</p>\r\n                  <p>Max Temp:</p>\r\n                  <p>Humidity:</p>\r\n\r\n                  <p>Wind:</p>\r\n                </div>\r\n\r\n                <div className=\"detailsValue\">\r\n                  <p>{`${apiData.feelsLike}`}</p>\r\n                  <p>{`${apiData.minTemp}`}</p>\r\n                  <p>{`${apiData.maxTemp}`}</p>\r\n                  <p>{`${apiData.humidity}`}</p>\r\n\r\n                  <p>{`${apiData.windSpeed}km/h`}</p>\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n          <hr />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}